# go-gql-server gqlgen.yml file
# Refer to https://gqlgen.com/config/
# for detailed .gqlgen.yml documentation.

# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - pkg/gql/schemas/schema.graphql
# Let gqlgen know where to put the generated server
exec:
  filename: pkg/gql/generated.go
  package: gql
# Let gqlgen know where to put the generated models (if any)
model:
  filename: pkg/gql/models/generated.go
  package: models
# Let gqlgen know where to put the generated resolvers
resolver:
  filename: pkg/gql/resolvers/generated.go
  type: Resolver
  package: resolvers

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind: []
  # - "github.com/ameernormie/go-api-template/graph/model"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
